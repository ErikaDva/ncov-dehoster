import java.nio.file.Paths

// Illumina Parameters
params {

    // Illumina fastq reads directory, can be singular or paired
    directory = false

    // Covid Reference Contig ID
    covid_ref_id = "MN908947.3"

    // Composite bwa index folder (so that they don't have to be made each time)
    composite_bwa_index = "/Drives/P/CanCOGeN/dehosting_testing/composite_index"

    // Minimum mapping quality of covid reads to keep
    keep_min_map_quality = 60

    // Minimum mapping quality of the human reads to remove
    remove_min_map_quality = 0

    // Minimum fastq read length (unused currently)
    min_length = 50

    // Maximum fastq read length (unused currently)
    max_length = 300

    // Single-end reads as input
    single_end = false

    // illumina fastq search path
    illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}', '*pair{1,2}' ]
    fastqExtensions = ['.fastq', '.fastq.gz', '.fq', '.fq.gz']

    fastqpaths = makeFastqPaths( params.illuminaSuffixes, params.fastqExtensions )

}

def makeFastqPaths ( illuminaSuffixes, fastqExtensions ) {

    def fastq_searchpath = []
    for (suffix in illuminaSuffixes){
        for (extension in fastqExtensions){
            // Make a glob to recurse directories
            dirNameGlob = params.directory.replaceAll(/\/+$/, "") + '**'

            // Make a glob for filenames
            fileNameGlob = suffix + extension

            // Build a path
            searchPath = Paths.get(dirNameGlob, fileNameGlob)

            fastq_searchpath.add(searchPath.toString())
        }
    }
    return fastq_searchpath
}
